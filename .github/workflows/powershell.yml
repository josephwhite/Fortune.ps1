# Modification of Microsoft's PSScriptAnalyzer GitHub Action.
#
# ~ This workflow uses actions that are not certified by GitHub.
# ~ They are provided by a third-party and are governed by
# ~ separate terms of service, privacy policy, and support
# ~ documentation.
# ~
# ~ https://github.com/microsoft/action-psscriptanalyzer
# ~ https://pester.dev/docs/usage/code-coverage#integrating-with-github-actions

name: PSScriptAnalyzer

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    # 4:22 AM on Saturdays
    - cron: '22 4 * * 6'

permissions:
  contents: read

jobs:
  build:
    name: PSScriptAnalyzer
    permissions:
      # Needed by actions/checkout to fetch code
      contents: read
      # Needed by github/codeql-action/upload-sarif to upload code scan results
      security-events: write
      # Private repository permission to get the Action run status
      actions: read 
    
    # Run on multiple operating systems
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      # Checkout repo
      - name: Checkout
        uses: actions/checkout@v4

      # Scan code.
      # Installs the following modules for PowerShell
      # - PSScriptAnalyzer (https://github.com/PowerShell/PSScriptAnalyzer)
      # - ConvertToSARIF (https://github.com/microsoft/ConvertToSARIF)
      - name: Run PSScriptAnalyzer
        uses: microsoft/psscriptanalyzer-action@v1.1
        with:
          path: .\
          recurse: true
          output: psscriptanalyzer-results.sarif

      # Upload the SARIF file generated from PSScriptAnalyzer.
      - name: Upload PSScriptAnalyzer SARIF results file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: psscriptanalyzer-results.sarif

      # Install Pester (https://github.com/pester/Pester)
      - name: Install Pester
        shell: pwsh
        run: Install-Module -Name Pester -Force -Scope CurrentUser
      
      # Run Pester tests with Code Coverage
      - name: Run Pester Tests
        run: |
          $pesterconfig = New-PesterConfiguration
          $pesterconfig.Run.Path = "."
          $pesterconfig.CodeCoverage.Enabled = $true
          $pesterconfig.CodeCoverage.OutputPath = "pester-coverage.xml"
          $pesterconfig.TestResult.Enabled = $true
          Invoke-Pester -Configuration $pesterconfig

      # Upload the code coverage from Pester.
      - name: Upload code coverage report
        if: ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: solution\pester-coverage.xml
